<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Álvaro Mongil</title>
    <link>https://alvaromongil.com/posts/</link>
    <description>Recent content in Posts on Álvaro Mongil</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 16 Apr 2020 12:13:07 +0200</lastBuildDate>
    <atom:link href="https://alvaromongil.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terralib: Run Terraform commands in your Go code</title>
      <link>https://alvaromongil.com/posts/terralib-run-terraform-commands-in-your-go-code/</link>
      <pubDate>Thu, 16 Apr 2020 12:13:07 +0200</pubDate>
      <guid>https://alvaromongil.com/posts/terralib-run-terraform-commands-in-your-go-code/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/28900900?s=460&amp;amp;v=4&#34; alt=&#34;Terraform logo&#34;&gt;&#xA;&lt;img src=&#34;https://blog.golang.org/gopher/header.jpg&#34; alt=&#34;Gopher&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;When developing automated infrastructure tests, I&amp;rsquo;ve often had to use Terraform to spin up an ephemeral cloud environment and then perform some tests on it, using the AWS or the Azure SDK (i.e. checking connectivity or next hops with Azure Network Watcher API calls).&lt;/p&gt;&#xA;&lt;p&gt;Terraform is only supported through a Command-Line-Interface, and I wanted to perform all operations in a single Go program.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s the reason I started to dig into the Terraform code a create a library of my own so I could call Terraform CLI commands within my Go programs. I have just released a &lt;a href=&#34;https://github.com/amongil/terralib&#34;&gt;working alpha of my Terralib project&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Developing a Github Action in Go</title>
      <link>https://alvaromongil.com/posts/developing-a-github-action-in-go/</link>
      <pubDate>Mon, 23 Mar 2020 16:43:10 +0100</pubDate>
      <guid>https://alvaromongil.com/posts/developing-a-github-action-in-go/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/44036562?s=200&amp;amp;v=4&#34; alt=&#34;GitHub actions logo&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve taken part in this month&amp;rsquo;s GitHub Hackathon. This time it consisted of creating a &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Action&lt;/a&gt; and publishing it on the Marketplace.&lt;/p&gt;&#xA;&lt;p&gt;Browsing through the marketplace, I did not see any connector to Azure Queues or Azure Event Hub, so I decided to write an action in Go that would send the last job status of the GitHub Workflow (failure, success, etc&amp;hellip;), along with some Git metadata, to an Azure Queue, for further processing through any consumer application that would read from that Azure Queue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Infrastructure development with the AWS CDK</title>
      <link>https://alvaromongil.com/posts/infrastructure-development-with-the-aws-cdk/</link>
      <pubDate>Tue, 29 Oct 2019 10:32:00 +0200</pubDate>
      <guid>https://alvaromongil.com/posts/infrastructure-development-with-the-aws-cdk/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdkworkshop.com/images/new-cdk-logo.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Amazon Web Services has recently released the Cloud Development Kit. It seemed like the idea was to expose AWS resources through a TypeScript API so that you could share your CloudFormation templates through NPM libraries, making it easier to share your work and to deploy your infrastructure. Within a few examples, I was hooked. You can follow part of my journey in the codelab workshop I created at &lt;a href=&#34;https://aws-cdk-workshop.alvaromongil.com/#0&#34;&gt;https://aws-cdk-workshop.alvaromongil.com/#0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I&#39;m joining the Storj network</title>
      <link>https://alvaromongil.com/posts/im-joining-the-storj-network/</link>
      <pubDate>Sun, 11 Aug 2019 11:33:59 +0200</pubDate>
      <guid>https://alvaromongil.com/posts/im-joining-the-storj-network/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://storj.io//press-kit/Storj_io-logo-white.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Lately, I have not been giving much attention to my &lt;a href=&#34;https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/&#34;&gt;Raspberry Pi 3 B+&lt;/a&gt; and I remembered that a few months back I had received an invitation to the &lt;a href=&#34;https://storj.io/&#34;&gt;Storj network&lt;/a&gt;. Luckily, I have a spare &lt;a href=&#34;https://www.amazon.com/Seagate-Portable-External-Hard-Drive/dp/B07CRG7BBH/ref=sr_1_3?keywords=STGX1000400&amp;amp;qid=1565514627&amp;amp;s=gateway&amp;amp;sr=8-3&#34;&gt;1TB external HDD&lt;/a&gt; that I can now hopefully put to good use.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Storj is an S3-compatible platform and suite of decentralized applications that allows you to store data in a secure and decentralized manner.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;node-installation&#34;&gt;Node installation&lt;a href=&#34;#node-installation&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34;&#xA;      stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;&#xA;      &lt;path d=&#34;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&#34;&gt;&lt;/path&gt;&#xA;      &lt;line x1=&#34;8&#34; y1=&#34;12&#34; x2=&#34;16&#34; y2=&#34;12&#34;&gt;&lt;/line&gt;&#xA;   &lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;After restoring my Pi to factory defaults and enabling SSH to connect and run the necessary installation commands from my Macbook, it is time to start with the prerequisites: mounting the external hard drive, installing docker and setting up port-forwarding.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
